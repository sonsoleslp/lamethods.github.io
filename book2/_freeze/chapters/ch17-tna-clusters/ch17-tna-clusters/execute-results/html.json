{
  "hash": "87d58093f89c05eef543ec7370386398",
  "result": {
    "markdown": "---\ntitle: \"Mining Patterns and Clusters with Transition Network Analysis: A Heterogeneity Approach\"\nwarning: FALSE\nformat: html    \nexecute:\n  message: FALSE\nauthor: \n   - name: \"Sonsoles López-Pernas\"\n   - name: \"Santtu Tikka\"\n   - name: \"Mohammed Saqr\"\ncrossref:\n  fig-title: '**Figure**'\n  fig-labels: arabic\n  title-delim: \"**.**\"\nabstract-title: \"Abstract\"\nabstract: \"In this chapter, we demonstrate how we can identify and study clusters within Transition Network Analysis (TNA) to reveal the underlying heterogeneity in learners' behavioral patterns. Specifically, we rely on mixture Markov Models (MMM)  to identify latent subgroups characterized by unique transition probabilities, a method that can also incorporate covariates to explain the identified clusters.  We employ the `tna` R package to understand the distinct transition dynamics between states or events in each cluster through the study of centrality measures, communities and cliques. Lastly, we exemplify how to implement other forms of clustering (e.g., distance based) and grouping, as well as other types of transition networks (e.g., frequency-based transition networks).\"\nkeywords: \"learning analytics, transition network analysis, mixture Markov models, heterogeneity, clustering\"\ndpi: 900\nbibliography: references.bib\nextract-media: \"img\"\nfig-align: center\nfig-width: 5\nfig-height: 5\n---\n\n\n## Introduction\n\nClusters, within the context of Transition Network Analysis (TNA), represent distinct subgroups within the sequence data that exhibit unique transition patterns between states or events [@Saqr2025-ku]. In other words, these clusters share similar transition dynamics that are closer to each other within the same cluster and rather different from other clusters. Identifying these clusters rests on the assumption that students’ behavior varies across contexts and conditions giving rise to patterns of similar behavior that can be captured by appropriate clustering techniques. In doing so, clustering mines these unobserved patterns that may be overlooked when studying the data as a whole without considering the heterogeneity. Not accounting for the heterogeneity in the data may obscure individual differences [@Bryan2021-im], let alone the true underlying structure.\n\nClusters often arise from an underlying data generation mechanism that shapes how learners interact with tasks, contexts, and each other. The data generating mechanism reflects the interplay of cognitive, emotional, and social processes, as well as the structure and demands of the learning environment. For instance, self-regulation as a data generating mechanism shapes the transitions between states ---such as planning, monitoring, and adaptation--- which are driven by learners’ efforts to achieve goals, respond to feedback, or enact their tasks [@Karoly1993-ud]. External factors, such as the presence of collaborative tasks or deadlines, may also influence these transitions by prompting learners to emphasize specific strategies like socio-emotional regulation or task coordination. Additionally, the heterogeneity in learners' dispositions contributes to diverse patterns in how they regulate their learning as well as the facilitation and contextual variables. Together, these factors generate the distinct SRL transition patterns that are captured and represented with TNA clusters offering a window into their learning processes. \n\nCapturing such patterns allows to accurately understand students’ learning processes and their variations. Furthermore, it provides a foundation for theory building by linking these clusters to specific underlying mechanisms, e.g., self-regulation tactics and strategies. Clusters also represent episodes ---sessions, epochs or times--- where learners manifest certain behaviors. For instance, in a learning management system (LMS), a cluster could represent students’ pattern of focus on assessment, another may represent students’ engagement with their lectures, and so on. In the same vein, in self-regulated learning, clusters reveal variations in learning strategies, such as learners who adapt effectively by transitioning from monitoring to task adaptation, demonstrating advanced metacognitive skills. In contrast, some clusters may show learners stuck in cycles of monitoring and exploration without progressing, highlighting inefficiencies in self-regulation that could benefit from targeted interventions.\n\nThe learning analytics literature has a rich tradition of grouping students’ similar behavior using similar methods, e.g., in sequence mining of LMS data these clusters are often referred to as tactics and aims to find clusters of online behavior [@Saqr2023-ts], self-regulation  [@Tormanen2022-fw], or engagement [@Saqr2023-lo]. One can say that clusters in TNA are similar, however, the emphasis here is on clusters that share similar transition dynamics.\n\nClustering in TNA not only identifies subgroups, but also broadens our understanding of the strategies learners employ [@Saqr2024-as]. When we analyze the group as a whole, only the average or most common patterns are visible. Instead, clustering allows to place the focus in patterns that are unique to specific subgroups, which may have been eclipsed by the general trends [@Bryan2021-im]. Moreover, clustering allows researchers to ask questions about the conditions under which specific patterns emerge if we use covariates and explanatory variables as part of the clustering model. For instance, do learners who frequently transition between planning and monitoring perform better in problem-solving tasks, and how does this vary in collaborative versus individual learning settings? Do emotional regulation clusters correlate with sustained engagement in challenging tasks, and how can these insights guide interventions?\n\nIn TNA, clustering the sequence data is performed through identifying distinct transition patterns using mixture Markov models (MMM) [@Helske2024-lq]. Unlike simple Markov models that assume homogeneity in transition dynamics across all data, MMM accounts for the coexistence of multiple latent subgroups, each governed by its own unique transition matrix. MMM works by assigning each sequence to one of latent subgroups which share similar transition probabilities. In general it is a robust and flexible technique for clustering sequential data and more importantly it allows the inclusion of covariates that help identify or explain why certain clusters emerged. \n\nUsing covariates allows researchers to explore what factors are associated with the emergence of specific clusters [@Vermunt2010-ps]. For example, higher-performing groups might consistently be involved in clusters of transitions involving monitoring and adaptation, reflecting emphasis on a metacognitive approach to their tasks. Such level of analysis contextualizes the clusters and also provides actionable insights into the conditions under which specific behaviors emerge.\n\nIn this chapter, we provide a tutorial on how to identify and study clusters within TNA. We first review related works addressing the heterogeneity of transition dynamics between states or events in the education literature. We then provide a step-by-step tutorial using R on how to implement clustering in TNA using the `seqHMM` [@Helske2019-pu] and the `tna` [@Lopez-Pernas2024-nh] packages. \n\n## Related work\n\nEducational research has evolved from adopting a one-size-fits-all approach to acknowledging the existing heterogeneity among students and their behavior [@Saqr2024-as]. The increasing availability of data about learners has made it possible to study heterogeneity when interacting in or with learning environments, like the LMS or discussion forums. This has enabled researchers to identify distinct self-regulated learning phases, learning tactics and strategies, or collaboration patterns. For example, looking at the transitions between actions that students carried out in the LMS, Saqr et al. [@Saqr2023-ts] identified four learning tactics using a mixture hidden mixture Markov model: *lecture read*,  *forum read*, *forum interact*, and *diverse*. Villalobos et al. [@Villalobos2024-ln] clustered sequences of students’ weekly interactions with the LMS using a mixture hidden Markov model and identified three distinct weekly strategies: *quiz-focused*,  *material-focused*, and *diverse*.\n\nLooking into the overall LMS engagement levels instead, López-Pernas and Saqr [@Lopez-Pernas2024-bv] identified three distinct trajectories of students’ engagement profiles throughout each course of a study program using a mixture Markov model: *engaged*, *fluctuating* and *persistently disengaged*. They found that engagement dynamics fit the salient features of a complex dynamic system, where students that are disengaged rarely transition to higher engagement states, and engaged students —in the rare occasion they transition to lower engagement— return back to their engaged state right away. In a similar context, Saqr et al. [@Saqr2023-lo] clustered students using a mixture hidden Markov model according to their patterns of LMS engagement and achievement and found three distinct trajectories of students: *engaged high-achieving starters*, *average starters*, and *disengaged starters*. \n\nAnother recent trend in the literature is the study of emotions and how they influence learning outcomes. For instance, Saqr and López-Pernas [@Saqr2024-yo] used a mixture hidden Markov model to cluster students’ according to the transitions between their emotions throughout two lectures. They found three trajectories: one with consistent anxiety, another one with constant happiness and alertness, and a third one with fluctuations between motivation-satisfaction and happiness-alertness. In another study, Törmänen et al. [@Tormanen2022-fw] used mixture hidden Markov models to cluster multimodal data: affective states and regulation were identified from video data, and activation was captured from electrodermal activity data. The authors identified four clusters of students with distinct socio-emotional interaction episodes ---*frequent regulation*, *occasional regulation*, *positive*, and *negative*--- which showed differences in the variability of affective states and the activation of learning regulation.\n\n## Tutorial: Clusters in TNA\n\nIn this section we present a step-by-step tutorial on how to identify and study clusters within TNA. Specifically, we will illustrate how to identify clusters using MMMs, visualize them, compare them,  detect communities and compute centralities. We also illustrate how to implement other clustering and grouping techniques. To be able to follow the tutorial, it is assumed that the reader is familiar with the R programming language. If that is not the case, it is recommended to refer to previous tutorials on the basics of R [@Tikka2024-ph], data cleaning [@Kopra2024-fx], basic statistics [@Tikka2024-wl], and visualization [@Lopez-Pernas2024-ge]. It is also recommended to have previous knowledge about Markov models [@Helske2024-lq] and to have read Chapter 15 about TNA [@LABOOK2_Chapter_15].\n\n\n::: {.cell}\n\n:::\n\n\n\n\n### Importing libraries\n\nAs a first step in our tutorial, we will import the necessary libraries:\n\n- **tidyverse**: A collection of R packages for data science, including tools for data manipulation (`dplyr`), visualization (`ggplot2`), tidying data (`tidyr`), and more, designed to work seamlessly together [@tidyverse].\n- **TraMineR**: A package for sequence analysis that provides methods to analyze and visualize sequential data, like event transitions or state changes [@Gabadinho2011-wz].\n- **seqHMM**: A package for sequence analysis  supporting modeling and clustering of sequential data using various Markov models [@Helske2019-pu].\n- **tna**: A package for implementing TNA, offering tools to estimate, visualize and investigate transitions over time using a network lens [@Lopez-Pernas2024-nh].\n- **rio**: A package for reading data in several formats [@rio].\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # install.packages(\"tidyverse\")\nlibrary(TraMineR) # install.packages(\"TraMineR\")\nlibrary(seqHMM) # install.packages(\"seqHMM\")\nlibrary(tna) # install.packages(\"tna\")\nlibrary(rio) # install.packages(\"rio\")\n```\n:::\n\n\n### Preparing the data\n\nWe will use a simulated dataset based on a recent study by Saqr and López-Pernas [@Saqr2023-nv], containing students' coded utterances in project-based learning implemented through online forum discussions. In this dataset, each row represents a team's collaboration on a problem, containing the ordered coded utterances in each column. In addition, the dataset contains the grade for each student. There are 3000 sequences in total and  10 different types of coded utterances: *agree*, *argue*, *disagree*, *discuss*, *evaluate*, *facilitate*, *organize*, *question*, *share*, and *socialize.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsimulated_data <- import(\"https://github.com/lamethods/data2/raw/main/pbl/pbl.RDS\")\n```\n:::\n\n\nWe can use the dataset to create a sequence object using the `seqdef` function from `TraMineR` and pass our coded data as an input (excluding the grades).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsequ <- seqdef(simulated_data[, -1])\n```\n:::\n\n\n### Clustering\n \nIn our next step, we will cluster our sequence data with the aim of finding distinct groups that are governed by different transition dynamics. Specifically, we will fit an MMM to our data. A Markov model is a statistical model used to describe systems that transition between states with certain probabilities [@Helske2024-lq]. Markov models work under the assumption that the probability of moving to the next state depends only on the current state, not on the sequence of states that preceded it. A mixture Markov model extends the Markov model by allowing for multiple subpopulations or groups, each with its own set of transition probabilities (see @fig-mmm-example). Instead of assuming a single transition structure for all data, it models the data as a combination (or mixture) of multiple Markov models, where each component represents a different latent subgroup. For more details on these concepts, please refer to [@Helske2024-lq].\n\n![Markov model vs. mixture Markov model](mmm.png){#fig-mmm-example width=80%}\n\nWe will use the `seqHMM` library [@Helske2019-pu] to cluster our sequences of students' collaboration in groups using an MMM. When dealing with long sequences, the algorithm in charge of finding the best fitting model may take a long time. Therefore, it is recommended to provide a starting value of initial and transition probabilities that we hypothesize will be close to the real one that we expect the algorithm to find. As is the case in most clustering techniques, we do not know the optimum number of clusters. We illustrate the process for four clusters in this tutorial. In practice, we should estimate different models with different number of clusters to see which is the best fitting (lowest Bayesian Information Criterion level).  Please, refer to a previous tutorial on Markov models for more details on this step [@Helske2024-lq]. \n\nTo simulate the **transition probabilities**, we use the function `simulate_transition_probs` from `seqHMM`. As the first input, we provide the number of events or states in our model (ten in our case). As the second input we provide the number of clusters that we expect to find in this model (as mentioned before, we should try several combinations). \n\nTo simulate the **initial probabilities**, we extract the first coded utterance for the complete sequence object, and we use `table` on the first column to calculate the proportion of times each code appears as the first step in the collaboration. We replicate these probabilities 4 times (one for each hypothesized cluster).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Creating constants for the number of codes (10) and the number of clusters (4)\nN_CODES <- length(alphabet(sequ))\nN_CLUSTERS <- 4\n\n# Transition probabilities (10 codes, 4 clusters)\ntrans_probs <- simulate_transition_probs(N_CODES, N_CLUSTERS, diag_c = 1)\n\n# Initial probabilities (proportion of each code in t = 1)\ninit_probs <- as.numeric(prop.table(table(sequ[, 1])[1:N_CODES]))\n\n# Replicate initial probabilities for each cluster\ninit_probs <- replicate(N_CLUSTERS, init_probs, simplify = FALSE)\n```\n:::\n\n\n\nWe can now use `build_mmm` to define our MMM. We provide the sequence object as an input along with the number of clusters we expect to find (`n_clusters`), the transition probabilities, and the initial probabilities. In addition, an advantage of mixture Markov models ---similarly, to other mixture models--- is that it can take covariates. To do so, we have to provide the complete dataframe and specify the column(s) that we want to use as covariates, in our case,  `Grade`. It is important to note that this dataframe should be in the same order as our sequence object. In addition, we need to provide a formula. In this case we use the formula ` ~ 0 + Grade,` which indicates that the cluster membership is explained by the students' grades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build mixture Markov model for 4 clusters\nmmm <- build_mmm(sequ, \n                  n_clusters = N_CLUSTERS,\n                  transition_probs = trans_probs,\n                  data = simulated_data,\n                  algorithm = \n                  formula = ~ 0 + Grade,\n                  initial_probs = init_probs)\n```\n:::\n\n\nLastly, we can fit our model using `fit_model`. We provide the model that we have just defined (`mmm`) as an input. We can also define a series of parameters to specify the runtime of the algorithm that will find the optimum cluster solution. For example, we can specify how many CPU threads we would like to use (`threads` argument, 1 by default), that it should have 500 iterations (`restart` within `control_em` argument)  as well as the optimization algorithm (`algorithm` within `control_em` argument, `\"NLOPT_GD_MLSL_LDS\"` by default), among others. See [@Helske2024-lq] and the `seqHMM` documentation [@Helske2019-pu] for more details. When dealing with long sequences and complex data like ours, this process can take a long time so you might need to leave your computer working for a few hours to arrive to the best solution. Once it has completed, we will have out fitted mixture Markov model in `fit_mmm`. Remember that in a real situation you would have to repeat this process for a range of clustering solutions (e.g., 2--10) to identify the optimum number of clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_mmm <- fit_model(\n  mmm, \n  global_step = TRUE,\n  local_step = TRUE,\n  threads = 60,\n  control_em = list(\n    restart = list(times = 500,  n_optimum = 501),\n    algorithm = \"NLOPT_GD_MLSL_LDS\"\n))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n### Creating and visualizing TNA results\n\nNow that we have our model fitted, we can use TNA ---through the `tna` package [@Lopez-Pernas2024-nh]--- to inspect the clusters that we have identified. We can use the function `group_tna` to create a grouped TNA model based on the clustering results. Specifically, we need to pass the MMM object (`fit_mmm$model`) as an argument.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntna_group <- group_tna(fit_mmm$model)\n```\n:::\n\n\nThe functions that we have learned in Chapter 15 @LABOOK2_Chapter_15 apply also to our grouped model created from the clustering results. For instance, we can plot the model using the `plot` function, and a separate plot will be created for each cluster, each with their own initial and transition probabilities (@fig-plot). As a reminder, the pie around each node represents the initial probability of each code, whereas the arrows represent the transition probabilities between them.\n\nWe can see that Cluster 1 is characterized by discussions starting with *socialize*, with strong transitions between  *share* and *discuss*, and *disagree* and *facilitate*, *argue* and *discuss*, and *agree* and *discuss*. Cluster 2 is characterized by starting with *argue*, and also a strong transition between *share* and *discuss*, but also *disagree* and  *socialize*. Cluster 3 encompasses more diverse of initial probabilities ---especially *discuss* and *evaluate*. This cluster has a very strong repetition of *organize*,  as well as *facilitate*. Similar to the previous clusters, *share* and *discuss* is the predominant transition between different codes, followed by *agree* and *discuss*. Cluster 4 has fewer but stronger transitions, especially between *socialize* and *disagree*, *share* and *discuss*, and *argue* and *discuss*.\n\n\n::: {#fig-plot .cell layout=\"[1,1]\"}\n\n```{.r .cell-code}\nplot(tna_group)\n```\n\n::: {.cell-output-display}\n![Socially triggered](ch17-tna-clusters_files/figure-html/fig-plot-1.png){#fig-plot-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Argumentation triggered](ch17-tna-clusters_files/figure-html/fig-plot-2.png){#fig-plot-2 width=480}\n:::\n\n::: {.cell-output-display}\n![Facilitated discussions](ch17-tna-clusters_files/figure-html/fig-plot-3.png){#fig-plot-3 width=480}\n:::\n\n::: {.cell-output-display}\n![Information triggered](ch17-tna-clusters_files/figure-html/fig-plot-4.png){#fig-plot-4 width=480}\n:::\n\nPlot of each TNA model\n:::\n\n\n\nWe can also use the `summary` function to obtain a combined summary of the models corresponding to each cluster (@tbl-summary). We can see differences in the overall network properties of each cluster. Cluster 3 is the most connected cluster, with the largest number of edges, and highest density value, while Cluster 4 is the least connected one. Clusters 1 and 2 lie in between,  Cluster 2 being more dense and interconnected (although with higher variability), while Cluster 1 has higher reciprocity and is more stable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(tna_group)\n```\n:::\n\n::: {#tbl-summary .cell tbl-cap='Summary of the grouped `tna` model'}\n::: {.cell-output-display}\n|metric                      | Cluster 1| Cluster 2| Cluster 3| Cluster 4|\n|:---------------------------|---------:|---------:|---------:|---------:|\n|Node Count                  |     10.00|     10.00|     10.00|     10.00|\n|Edge Count                  |     61.00|     65.00|     76.00|     45.00|\n|Network Density             |      0.68|      0.72|      0.84|      0.50|\n|Mean Distance               |      0.18|      0.16|      0.03|      0.23|\n|Mean Out-Strength           |      1.00|      1.00|      1.00|      1.00|\n|SD Out-Strength             |      0.97|      1.12|      0.86|      1.31|\n|Mean In-Strength            |      1.00|      1.00|      1.00|      1.00|\n|SD In-Strength              |      0.00|      0.00|      0.00|      0.00|\n|Mean Out-Degree             |      6.10|      6.50|      7.60|      4.50|\n|SD Out-Degree               |      2.69|      3.17|      1.90|      1.84|\n|Centralization (Out-Degree) |      0.32|      0.42|      0.25|      0.37|\n|Centralization (In-Degree)  |      0.32|      0.30|      0.25|      0.37|\n|Reciprocity                 |      0.85|      0.75|      0.83|      0.60|\n:::\n:::\n\nSince we entered the grade as a covariate in the clustering process, we can study how grades are related to cluster membership. To obtain a summary of the effect of the covariates, we can use the `mmm_stats` function from `tna`. The output of this  function is a data frame containing the estimate associated with each covariate (only one in our case: grade) and its confidence interval, the standard error, the t-score, and the p-value. The results are calculated taking Cluster 1 as a reference. From @tbl-mmm-stats, we can see that grades had a small but statistically significant effect on the membership of clusters 2 and 3 (p-value < 0.05), positive in the case of Cluster 2 (meaning that high achievers were more likely to belong to this cluster), and negative in the case of Cluster 3. For cluster 4, the effect was not statistically significant.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmm_stats(fit_mmm$model)\n```\n:::\n\n::: {#tbl-mmm-stats .cell tbl-cap='Covariate effect'}\n::: {.cell-output-display}\n|Cluster   |Variable | Estimate| p_value| CI_Lower| CI_Upper| Std_Error| t_value|\n|:---------|:--------|--------:|-------:|--------:|--------:|---------:|-------:|\n|Cluster 2 |Grade    |    0.004|    0.00|    0.003|    0.006|     0.001|    6.31|\n|Cluster 3 |Grade    |   -0.007|    0.00|   -0.009|   -0.006|     0.001|   -8.45|\n|Cluster 4 |Grade    |    0.000|    0.58|   -0.001|    0.002|     0.001|    0.55|\n:::\n:::\n\n\nTo ease the interpretation of our results henceforward, we can provide the clusters with more meaningful names. We can use the `rename_groups` function to provide the new names that are representative of each cluster's dynamics.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncnames <- c(\"Socially triggered\", \"Argumentation triggered\", \n            \"Facilitated discussions\", \"Information triggered\")\ntna_group <- rename_groups(tna_group, cnames)\n```\n:::\n\n\n\n### Communities\n\nSimilarly to simple TNA, we can study the specific patterns that characterize each cluster. For example, we can study whether we can detect distinct communities of states or events that often transition to one another to a greater extent than to the rest of the nodes, as well as compare if these communities are similar between clusters. We can obtain the community assignments using the `communities` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncommunities_group <- communities(tna_group)\n```\n:::\n\n\nWe can plot the results using the `plot` function and specifying the method of community detection we want to use. Refer to [@Hernandez-Garcia2024-ah] for more details on the different community finding algorithms. For the example below we chose the  *Leading Eigen* algorithm since it clearly illustrates the existence of different communities (depicted by different colors) in each cluster (@fig-communities), each encompassing different nodes. Some similarities that can be perceived are that *argue* and *discuss* belong to the same community in each of the four clusters, and so do *disagree* and *facilitate* and *share* and *argue*. *Organize* is assigned to a community of its own in two clusters, suggesting that this action occurs rarely as a part of the collaboration process ---probably more often at the beginning.\n\nOther algorithms would have yielded different results. For example the *Infomap* [@Rosvall2008-vj] algorithm does not detect any communities (i.e., the whole network is a single community) in any of the clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(communities_group, method = \"leading_eigen\")\n```\n:::\n\n::: {#fig-communities .cell layout=\"[1,1]\"}\n::: {.cell-output-display}\n![Socially triggered](ch17-tna-clusters_files/figure-html/fig-communities-1.png){#fig-communities-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Argumentation triggered](ch17-tna-clusters_files/figure-html/fig-communities-2.png){#fig-communities-2 width=480}\n:::\n\n::: {.cell-output-display}\n![Facilitated discussions](ch17-tna-clusters_files/figure-html/fig-communities-3.png){#fig-communities-3 width=480}\n:::\n\n::: {.cell-output-display}\n![Information triggered](ch17-tna-clusters_files/figure-html/fig-communities-4.png){#fig-communities-4 width=480}\n:::\n\nPlot of each TNA model communities\n:::\n\n\n\n### Centralities\n\nCentrality measures in transition networks allow to identify the role that each state or event takes in the process. For example, betweenness centrality captures how often a state acts as a bridge within the network, connecting different parts of the process. Out-degree centrality reflects the number of direct transitions originating from a state, indicating to which extent it drives the process towards other states. See @LABOOK2_Chapter_15 for a complete rationale of the role of centrality measures in TNA, and [@Saqr2024-mc] for a detailed description of the most common centrality measures.\n\nWhen working with clusters in TNA, since each cluster has a different transition probability matrix, the nodes also have different centrality measures. The way to compute them is the same as in regular TNA, i.e., using the `centralities` function. We can specify which specific centralities we want to compute and plot them using the `plot` function (@fig-centralities). **Betweenness** centrality shows the greatest differences. In the *Facilitated discussions* cluster, *Facilitate* has the highest betweenness followed by *Disagree*. In the *Information triggered* cluster, *Argue* is the node with the highest betweenness, followed by *Socialize*. In *Argumentation triggered*,  the highest betweenness is that of the *Evaluate* node, followed by *Share*. In the *Socially triggered* cluster, *Facilitate* is the node with the highest betweenness. In terms of **In-strength**, the four clusters follow similar patterns, with *Discuss* being the node with the highest value, followed by *Socialize*. Lastly, regarding **Out-strength**, *Share* and *Discuss* are the nodes with the highest overall centrality values, sharing similar patterns among the clusters. The *Facilitate* node has the lowest out-strength for all clusters, indicating that is many times a recurring action that is repeated several times in a row. Similarly, the *Facilitated discussions* cluster has a remarkably low value of out-strength centrality for *Organize*, meaning that students might be commonly stuck at that point. To better understand the meaning of each of the centrality measures, please refer to [@LABOOK2_Chapter_15;@Saqr2024-ce]. We can also print the centralities for each cluster to find out their exact value.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncents <- centralities(\n  tna_group, \n  measures = c(\"Betweenness\", \"InStrength\", \"OutStrength\")\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(cents, ncol = 3) \n```\n\n::: {.cell-output-display}\n![Plot of each TNA model centralities](ch17-tna-clusters_files/figure-html/fig-centralities-1.png){#fig-centralities width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(cents)\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {#tbl-cent-table .cell tbl-cap='Centrality measures for each cluster'}\n::: {.cell-output-display}\n\\begin{table}\n\\centering\\centering\n\\resizebox{\\ifdim\\width>\\linewidth\\linewidth\\else\\width\\fi}{!}{\n\\begin{tabular}[t]{lrrrrrrrrrrrr}\n\\toprule\n\\multicolumn{1}{c}{\\textbf{ }} & \\multicolumn{4}{c}{\\textbf{Betweenness}} & \\multicolumn{4}{c}{\\textbf{InStrength}} & \\multicolumn{4}{c}{\\textbf{OutStrength}} \\\\\n\\cmidrule(l{3pt}r{3pt}){2-5} \\cmidrule(l{3pt}r{3pt}){6-9} \\cmidrule(l{3pt}r{3pt}){10-13}\nState & 1. Soc. trig. & 2. Arg. trig. & 3. Fac. dis. & Inf. trig. & 1. Soc. trig. & 2. Arg. trig. & 3. Fac. dis. & Inf. trig. & 1. Soc. trig. & 2. Arg. trig. & 3. Fac. dis. & Inf. trig.\\\\\n\\midrule\nAgree & 15 & 9 & 0 & 9 & 0.70 & 0.32 & 0.76 & 0.73 & 1.00 & 0.98 & 1.00 & 1.00\\\\\nArgue & 21 & 22 & 0 & 40 & 0.94 & 1.34 & 0.80 & 0.99 & 0.95 & 0.92 & 0.90 & 0.94\\\\\nDisagree & 0 & 0 & 14 & 0 & 0.10 & 0.04 & 0.04 & 0.06 & 1.00 & 1.00 & 1.00 & 1.00\\\\\nDiscuss & 0 & 0 & 0 & 0 & 3.05 & 3.26 & 2.41 & 4.08 & 0.73 & 0.63 & 0.52 & 0.57\\\\\nEvaluate & 15 & 24 & 17 & 3 & 0.58 & 0.69 & 0.46 & 0.60 & 0.98 & 0.94 & 1.00 & 1.00\\\\\nFacilitate & 22 & 0 & 40 & 16 & 1.12 & 0.04 & 0.97 & 0.05 & 0.35 & 0.47 & 0.26 & 0.26\\\\\nOrganize & 15 & 0 & 20 & 5 & 0.09 & 0.10 & 0.29 & 0.01 & 0.66 & 0.93 & 0.19 & 1.00\\\\\nQuestion & 0 & 9 & 2 & 3 & 0.25 & 0.36 & 0.14 & 0.59 & 0.90 & 0.87 & 0.85 & 1.00\\\\\nShare & 1 & 22 & 2 & 15 & 0.26 & 0.42 & 0.29 & 0.20 & 1.00 & 1.00 & 1.00 & 1.00\\\\\nSocialize & 1 & 8 & 2 & 18 & 1.34 & 2.04 & 1.29 & 1.43 & 0.85 & 0.87 & 0.73 & 0.98\\\\\n\\bottomrule\n\\end{tabular}}\n\\end{table}\n:::\n:::\n\n\n\n<!-- ## Comparing clusters -->\n\n::: {.cell}\n\n:::\n\n\n### Cliques\n\nTNA provides functions to identify groups of nodes that have a reciprocal relationship, i.e., strong transition probabilities to and from one another. These can be groups of two nodes (dyads), three (triads), and so on. When we wish to detect these patterns when working with clusters, we can use the same function as in simple TNA (`cliques`), but we need to specify for which of the clusters we want to identify these cliques. For example, if we would like to identify and plot all dyads on the *Socially triggered* cluster, we must subset the `tna_group` object by cluster name and then specify the size of the cliques (2 for dyads), as well as any additional parameters (e.g., threshold for considering strong reciprocal connections). We can plot the resulting dyads using the `plot` function. Do not forget that this function is interactive, so you will need to hit enter in the console to plot all dyads (alternatively, you may add the following argument to the `plot` function: `ask = FALSE`). @fig-cluster-cliques shows that there are three dyads in the *Socially triggered* cluster: one between *Argue* and *Discuss*, *Discuss* and *Socialize*, and *Evaluate* and *Question*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndyads1 <- cliques(tna_group[[\"Socially triggered\"]], size = 2, threshold = 0.15)\nplot(dyads1)\n```\n:::\n\n::: {#fig-cluster-cliques .cell layout=\"[1,1,1]\" layout-align=\"center\"}\n::: {.cell-output-display}\n![Dyad 1](ch17-tna-clusters_files/figure-html/fig-cluster-cliques-1.png){#fig-cluster-cliques-1 fig-align='center' width=288}\n:::\n\n::: {.cell-output-display}\n![Dyad 2](ch17-tna-clusters_files/figure-html/fig-cluster-cliques-2.png){#fig-cluster-cliques-2 fig-align='center' width=288}\n:::\n\n::: {.cell-output-display}\n![Dyad 3](ch17-tna-clusters_files/figure-html/fig-cluster-cliques-3.png){#fig-cluster-cliques-3 fig-align='center' width=288}\n:::\n\nDyads for cluster 1\n:::\n\n \n### Other forms of clustering and grouping\nThroughout the tutorial we have seen how to identify and study clusters of students that are ruled by different transition patterns. However, we might want to identify groups of students through other mechanisms and only afterwards investigate their properties and transition patterns. In this section, we review different ways in which we can do this.\n\n#### Clustering sequences\nA common way to study log data is through sequence analysis. Within this framework, several dissimilarity measures exist that allow to calculate how similar sequences of events or states are to one another, and cluster them in distinct groups. Distance measures can be broadly categorized in edit distances --- such as optimal matching---, shared attributes --- such as longest common subsequence (LCS), or longest common prefix (LCP), and distance based on state distributions ---e.g., euclidean distance or chi-squared. \n\nIn the next code chunk, we calculate the dissimilarity between our sequences using the `seqdist` function from the `TraMineR` package, using LCP as the distance measure, which means that sequences that start in the same way will have a shorter distance between them. We then cluster the sequences using hierarchical clustering (as implemented in the `hclust` function of the `stats` package) using Ward's method minimum variance method (`\"ward.D2\"`). We  establish the number of clusters by using the function `cutree` and retrieve the cluster assignment. We assign the result to a variable named `lcp_clusters`, to be able to operate with the cluster assignment later on. We can then visualize them using `seqdplot` (@fig-by-dist) in which we see the distribution of states at each time point. For more details about this process, please refer to @Saqr2024-ug. Upon inspection, we can assign names to each of the clusters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute dissimilarities between sequences using the LCP method.\ndissimilarities <- seqdist(sequ, method = \"LCP\", indel = 1)\n\n# Perform hierarchical clustering on the computed dissimilarities \nclusters_sessionsh <- hclust(as.dist(dissimilarities), method = \"ward.D2\")\n\n# Cut the hierarchical clustering tree into 4 clusters\nlcp_clusters <- cutree(clusters_sessionsh, k = 4)\n\n# Plot a distribution plot (seqdplot) for the sequences\n# grouped by their cluster assignments.\nseqdplot(sequ, group = lcp_clusters, ncol = 5)\n\n# Define meaningful cluster names based on interpretation of the data.\ncnamesd <- c(\"Facilitated discussions\", \"Information triggered\", \n             \"Argumentation triggered\", \"Socially triggered\")\n\n# Assign the corresponding cluster names to the cluster assignment vector.\nlcp_clusters <- cnamesd[lcp_clusters]\n```\n\n::: {.cell-output-display}\n![Distance-based sequence clusters](ch17-tna-clusters_files/figure-html/fig-by-dist-1.png){#fig-by-dist width=960}\n:::\n:::\n\n\nOnce we have our cluster assignments, we can create a new clustered TNA object with the `group_tna` function, by passing the sequence object and the cluster assignments (`lcp_clusters`) as arguments. We can visualize the resulting clusters using the `plot` function as usual (@fig-by-dist-tna), as well as perform all of the other operations that we have showcased throughout the chapter (centralities, communities, cliques, etc.).\n\n::: {#fig-by-dist-tna .cell layout=\"[1,1]\"}\n\n```{.r .cell-code}\nseq_tna <- group_tna(sequ, group = lcp_clusters)\nplot(seq_tna)\n```\n\n::: {.cell-output-display}\n![Argumentation triggered](ch17-tna-clusters_files/figure-html/fig-by-dist-tna-1.png){#fig-by-dist-tna-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Facilitated discussions](ch17-tna-clusters_files/figure-html/fig-by-dist-tna-2.png){#fig-by-dist-tna-2 width=480}\n:::\n\n::: {.cell-output-display}\n![Information triggered](ch17-tna-clusters_files/figure-html/fig-by-dist-tna-3.png){#fig-by-dist-tna-3 width=480}\n:::\n\n::: {.cell-output-display}\n![Socially triggered](ch17-tna-clusters_files/figure-html/fig-by-dist-tna-4.png){#fig-by-dist-tna-4 width=480}\n:::\n\nTNA using distance-based clusters\n:::\n\n\n#### Fixed groups\n\nIn addition to clustering, we can also create groups based on deterministic or known groups (e.g., gender, grades, course, etc.). In the following chunk, we create a variable named `Achievers` which is a vector containing the value `\"High\"` if the corresponding student has a grade above 50, and `\"Low\"` otherwise. We pass this vector as the `group` argument of `group_tna`, just like we did in the previous example and we can then us all the range of functions of `tna` on the two groups (@fig-by-group). This helps us visualize the difference in transition probabilities between low and high achievers.\n\n\n::: {#fig-by-group .cell layout=\"[1,1]\"}\n\n```{.r .cell-code}\nAchievers <- ifelse(simulated_data$Grade > 50, \"High\", \"Low\")\ncourse_tna <- group_tna(sequ, group = Achievers)\nplot(course_tna)\n```\n\n::: {.cell-output-display}\n![High Achievers](ch17-tna-clusters_files/figure-html/fig-by-group-1.png){#fig-by-group-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Low Achievers](ch17-tna-clusters_files/figure-html/fig-by-group-2.png){#fig-by-group-2 width=480}\n:::\n\nTNA using groups instead of clusters\n:::\n\n\n\n### Other forms of TNA\n\nAs demonstrated in @LABOOK2_Chapter_15, the TNA framework encompasses other forms of studying transitions, such as frequency-based transition networks. Instead of representing transition probabilities, frequency-based transition networks operate on the absolute values, i.e., the number or share of times each transition has appeared in the whole sequence object. This operationalization  might be more appropriate in cases that there are not enough data to make inferences. This mode also supports cluster, allowing to inspect and compare transition frequencies among clusters.\n\nIn the chunk below, we create a frequency-based transition network (@fig-by-scaled), providing the results of the distance-based clustering as the `group` argument.  \n\n::: {#fig-by-scaled .cell layout=\"[1,1]\"}\n\n```{.r .cell-code}\ntna_group_scaled <- group_ftna(sequ, group = lcp_clusters)\nplot(tna_group_scaled)\n```\n\n::: {.cell-output-display}\n![Argumentation triggered](ch17-tna-clusters_files/figure-html/fig-by-scaled-1.png){#fig-by-scaled-1 width=480}\n:::\n\n::: {.cell-output-display}\n![Facilitated discussions](ch17-tna-clusters_files/figure-html/fig-by-scaled-2.png){#fig-by-scaled-2 width=480}\n:::\n\n::: {.cell-output-display}\n![Information triggered](ch17-tna-clusters_files/figure-html/fig-by-scaled-3.png){#fig-by-scaled-3 width=480}\n:::\n\n::: {.cell-output-display}\n![Socially triggered](ch17-tna-clusters_files/figure-html/fig-by-scaled-4.png){#fig-by-scaled-4 width=480}\n:::\n\nFTNA of each group\n:::\n\n\n## Discussion\n\nStudying the learning process as a homogeneous phenomenon can overlook important variations that exist across different subgroups or contexts, leading to conclusions that may not fully capture the complexity of the phenomenon. Such an approach risks not only diluting the explanatory power of scientific findings but also perpetuating inequalities by failing to account for how distinct groups may experience or respond to the same processes differently. In turn, we should \"capitalize on the heterogeneity that characterizes most effects in science\" [@Bryan2021-im] (p. 86), so we can better understand variations, improving the relevance and applicability of our findings across diverse populations.\n\nIn this chapter, we have demonstrated how to identify clusters of transition networks, within the scope of TNA. We have illustrated this process for MMM clustering as well as for other forms of clustering. We have also showcased the features of TNA related to centralities, communities, and cliques, which provides as with a rich toolkit to study the heterogeneity of relational dynamics. Centrality measures, for instance, allow us to identify central states or transitions that shape the flow of behaviors or interactions. Influential nodes can vary significantly across subgroups, representing the diversity in how processes unfold.\n\nSimilarly, communities within the network can uncover tightly connected groups of transitions that represent cohesive patterns, dynamics, or strategies. These sub-networks might reveal distinct behavioral tendencies or shared practices that are specific to certain groups or contexts. Cliques, as smaller subsets of closely interconnected transitions, provide yet another layer of detail, capturing unique micro-patterns that might otherwise go overlooked.\n\nUnderstanding the different patterns that can be identified from transition networks and how they prevail or differ among clusters, provides a comprehensive view on learning processes from a heterogeneity lens. In other words, identifying and studying different subgroups help us move beyond simplistic, one-size-fits-all interpretations to recognize the complexity and diversity inherent in behavior and interaction. Such interpretations have the potential to advance learning theories and support the design of interventions or policies that are sensitive to the diverse ways individuals and groups experience and respond to learning processes, which is one of the driving goals of learning analytics research. Embracing heterogeneity constitutes a step forward in ensuring that findings are equitable and capture diversity.\n\n\n\n::: {#refs}\n:::\n\n",
    "supporting": [
      "ch17-tna-clusters_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}